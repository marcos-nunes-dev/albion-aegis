generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ServiceState {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
}

model Battle {
  albionId       BigInt    @id
  startedAt      DateTime
  totalFame      Int
  totalKills     Int
  totalPlayers   Int
  alliancesJson  Json
  guildsJson     Json
  ingestedAt     DateTime  @default(now())
  killsFetchedAt DateTime?

  @@index([startedAt])
}

model KillEvent {
  EventId             BigInt   @id
  TimeStamp           DateTime
  TotalVictimKillFame Int
  battleAlbionId      BigInt?
  killerId            String   @db.VarChar(64)
  killerName          String   @db.VarChar(48)
  killerGuild         String?  @db.VarChar(64)
  killerAlliance      String?  @db.VarChar(16)
  killerAvgIP         Float
  victimId            String   @db.VarChar(64)
  victimName          String   @db.VarChar(48)
  victimGuild         String?  @db.VarChar(64)
  victimAlliance      String?  @db.VarChar(16)
  victimAvgIP         Float
  killerEquipment     Json?
  victimEquipment     Json?
  ingestedAt          DateTime @default(now())

  @@index([TimeStamp])
  @@index([battleAlbionId])
  @@index([killerAlliance])
  @@index([victimAlliance])
  @@index([killerId])
  @@index([victimId])
}

model TrackingSubscription {
  id              String           @id @default(cuid())
  userId          String           @db.VarChar(64)
  entityName      String           @db.VarChar(64)
  entityType      EntityType
  discordWebhook  String
  minTotalFame    Int              @default(0)
  minTotalKills   Int              @default(0)
  minTotalPlayers Int              @default(0)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  battleResults   BattleResult[]
  counterHistory  CounterHistory[]

  @@index([entityName, entityType])
  @@index([userId])
  @@index([isActive])
}

model CounterHistory {
  id             String               @id @default(cuid())
  subscriptionId String
  periodName     String               @db.VarChar(64)
  startDate      DateTime
  endDate        DateTime?
  totalWins      Int                  @default(0)
  totalLosses    Int                  @default(0)
  totalKills     Int                  @default(0)
  totalDeaths    Int                  @default(0)
  isActive       Boolean              @default(true)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  battleResults  BattleResult[]
  subscription   TrackingSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([isActive])
  @@index([startDate])
}

model BattleResult {
  id               String               @id @default(cuid())
  subscriptionId   String
  counterHistoryId String
  battleAlbionId   BigInt
  isWin            Boolean
  kills            Int                  @default(0)
  deaths           Int                  @default(0)
  totalFame        Int
  totalPlayers     Int
  processedAt      DateTime             @default(now())
  counterHistory   CounterHistory       @relation(fields: [counterHistoryId], references: [id], onDelete: Cascade)
  subscription     TrackingSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, battleAlbionId], name: "subscription_battle_unique")
  @@index([subscriptionId])
  @@index([counterHistoryId])
  @@index([battleAlbionId])
  @@index([processedAt])
}

model Season {
  id                 String              @id @default(cuid())
  name               String              @unique
  startDate          DateTime
  endDate            DateTime?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  guildSeasons       GuildSeason[]
  mmrCalculationJobs MmrCalculationJob[]
  mmrCalculationLogs MmrCalculationLog[]

  @@index([isActive])
  @@index([startDate])
}

model Guild {
  id                 String              @id
  name               String              @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  guildSeasons       GuildSeason[]
  mmrCalculationLogs MmrCalculationLog[]

  @@index([name])
}

model GuildSeason {
  id                   String               @id @default(cuid())
  guildId              String
  seasonId             String
  currentMmr           Float                @default(1000.0)
  previousSeasonMmr    Float?
  carryoverMmr         Float?
  seasonEndMmr         Float?
  totalBattles         Int                  @default(0)
  wins                 Int                  @default(0)
  losses               Int                  @default(0)
  totalFameGained      BigInt               @default(0)
  totalFameLost        BigInt               @default(0)
  primeTimeBattles     Int                  @default(0)
  lastBattleAt         DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  lastBattleMmreAt     DateTime?
  lossesMmre           Int                  @default(0)
  primeTimeBattlesMmre Int                  @default(0)
  totalBattlesMmre     Int                  @default(0)
  totalFameGainedMmre  BigInt               @default(0)
  totalFameLostMmre    BigInt               @default(0)
  winsMmre             Int                  @default(0)
  primeTimeMasses      GuildPrimeTimeMass[]
  guild                Guild                @relation(fields: [guildId], references: [id], onDelete: Cascade)
  season               Season               @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  @@unique([guildId, seasonId])
  @@index([guildId])
  @@index([seasonId])
  @@index([currentMmr])
  @@index([lastBattleAt])
}

model GuildPrimeTimeMass {
  id                String          @id @default(cuid())
  guildSeasonId     String
  primeTimeWindowId String
  avgMass           Float           @default(0.0)
  battleCount       Int             @default(0)
  lastBattleAt      DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  guildSeason       GuildSeason     @relation(fields: [guildSeasonId], references: [id], onDelete: Cascade)
  primeTimeWindow   PrimeTimeWindow @relation(fields: [primeTimeWindowId], references: [id], onDelete: Cascade)

  @@unique([guildSeasonId, primeTimeWindowId])
  @@index([guildSeasonId])
  @@index([primeTimeWindowId])
  @@index([avgMass])
}

model PrimeTimeWindow {
  id          String               @id @default(cuid())
  startHour   Int
  endHour     Int
  timezone    String               @default("UTC")
  createdAt   DateTime             @default(now())
  guildMasses GuildPrimeTimeMass[]

  @@index([startHour, endHour])
}

model MmrCalculationJob {
  id                 String              @id @default(cuid())
  battleId           BigInt
  seasonId           String
  status             MmrJobStatus        @default(PENDING)
  attempts           Int                 @default(0)
  maxAttempts        Int                 @default(3)
  error              String?
  processedAt        DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  season             Season              @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  mmrCalculationLogs MmrCalculationLog[]

  @@unique([battleId, seasonId])
  @@index([battleId])
  @@index([seasonId])
  @@index([status])
  @@map("mmr_calculation_jobs")
}

model MmrCalculationLog {
  id                           String            @id @default(cuid())
  battleId                     BigInt
  seasonId                     String
  guildId                      String
  guildName                    String            @db.VarChar(64)
  previousMmr                  Float
  mmrChange                    Float
  newMmr                       Float
  kills                        Int               @default(0)
  deaths                       Int               @default(0)
  fameGained                   BigInt            @default(0)
  fameLost                     BigInt            @default(0)
  players                      Int               @default(0)
  avgIP                        Float             @default(0.0)
  isPrimeTime                  Boolean           @default(false)
  totalBattlePlayers           Int               @default(0)
  totalBattleFame              BigInt            @default(0)
  battleDuration               Int               @default(0)
  killClustering               Float             @default(0.0)
  winLossFactor                Float             @default(0.0)
  fameFactor                   Float             @default(0.0)
  playerCountFactor            Float             @default(0.0)
  ipFactor                     Float             @default(0.0)
  battleSizeFactor             Float             @default(0.0)
  kdFactor                     Float             @default(0.0)
  durationFactor               Float             @default(0.0)
  clusteringFactor             Float             @default(0.0)
  opponentStrengthFactor       Float             @default(0.0)
  winLossContribution          Float             @default(0.0)
  fameContribution             Float             @default(0.0)
  playerCountContribution      Float             @default(0.0)
  ipContribution               Float             @default(0.0)
  battleSizeContribution       Float             @default(0.0)
  kdContribution               Float             @default(0.0)
  durationContribution         Float             @default(0.0)
  clusteringContribution       Float             @default(0.0)
  opponentStrengthContribution Float             @default(0.0)
  totalWeightedScore           Float             @default(0.0)
  kFactorApplied               Float             @default(0.0)
  isWin                        Boolean           @default(false)
  hasSignificantParticipation  Boolean           @default(false)
  allianceName                 String?           @db.VarChar(16)
  opponentGuilds               String[]
  opponentMmrs                 Float[]
  calculationVersion           String            @default("1.0")
  processedAt                  DateTime          @default(now())
  antiFarmingFactor            Float?
  originalMmrChange            Float?
  mmrCalculationJob            MmrCalculationJob @relation(fields: [battleId, seasonId], references: [battleId, seasonId], onDelete: Cascade)
  guild                        Guild             @relation(fields: [guildId], references: [id], onDelete: Cascade)
  season                       Season            @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  @@unique([battleId, seasonId, guildId], name: "battleId_seasonId_guildId")
  @@index([battleId])
  @@index([seasonId])
  @@index([guildId])
  @@index([guildName])
  @@index([processedAt])
  @@index([mmrChange])
  @@index([isWin])
  @@index([isPrimeTime])
  @@index([antiFarmingFactor])
  @@map("mmr_calculation_logs")
}

enum EntityType {
  GUILD
  ALLIANCE
}

enum MmrJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  RETRY
}
